# Building LuaJIT core: bootstrapping, VM, runtime, JIT compiler.
# Major portions taken verbatim or adapted from the uJIT.
# Copyright (C) 2015-2019 IPONWEB Ltd.

cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)

if(CROSS)
  set(CMAKE_C_COMPILER ${CROSS})
endif()

enable_language(ASM)

message(STATUS "!WIP: C => ${CMAKE_C_COMPILER}; ASM => ${CMAKE_ASM_COMPILER}")

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

include(MakeSourceList)

# --- Define source tree -------------------------------------------------------
# {{{

# Core runtime.
make_source_list(SOURCES_RUNTIME
  SOURCES
    lj_api.c
    lj_bc.c
    lj_buf.c
    lj_debug.c
    lj_dispatch.c
    lj_err.c
    lj_func.c
    lj_gc.c
    lj_lib.c
    lj_load.c
    lj_mapi.c
    lj_meta.c
    lj_obj.c
    lj_state.c
    lj_str.c
    lj_strfmt.c
    lj_strfmt_num.c
    lj_strscan.c
    lj_tab.c
    lj_udata.c
    lj_vmevent.c
    lib_aux.c
    lib_init.c
)

# Lua frontend.
make_source_list(SOURCES_FRONTEND
  SOURCES
    lj_bcread.c
    lj_bcwrite.c
    lj_lex.c
    lj_parse.c
)

# Lua standard library + extensions by LuaJIT.
make_source_list(SOURCES_LUA_LIB
  # NB! Please do not changes the order of the libraries (required by buildvm).
  SOURCES
    lib_base.c lib_math.c lib_bit.c lib_string.c
    lib_table.c lib_io.c lib_os.c lib_package.c
    lib_debug.c lib_jit.c lib_ffi.c lib_misc.c
)

# JIT compiler, core part.
make_source_list(SOURCES_JIT_CORE
  SOURCES
    lj_asm.c
    lj_ffrecord.c
    lj_ir.c
    lj_mcode.c
    lj_record.c
    lj_snap.c
    lj_trace.c
)

# JIT compiler, machine-independent optimisations.
make_source_list(SOURCES_JIT_OPT
  SOURCES
    lj_opt_dce.c
    lj_opt_fold.c
    lj_opt_loop.c
    lj_opt_mem.c
    lj_opt_narrow.c
    lj_opt_sink.c
    lj_opt_split.c
)

make_source_list(SOURCES_UTILS
  SOURCES
    lj_alloc.c
    lj_char.c
    lj_profile.c
    lj_vmmath.c
)

make_source_list(SOURCES_FFI
  SOURCES
    lj_carith.c
    lj_ccallback.c
    lj_ccall.c
    lj_cconv.c
    lj_cdata.c
    lj_clib.c
    lj_cparse.c
    lj_crecord.c
    lj_ctype.c
)

make_source_list(SOURCES_JIT
  SOURCES
    ${SOURCES_JIT_CORE}
    ${SOURCES_JIT_OPT}
)

# Everything except FFI and JIT.
make_source_list(SOURCES_CORE_NO_JIT_FFI
  SOURCES
    ${SOURCES_RUNTIME}
    ${SOURCES_LUA_LIB}
    ${SOURCES_FRONTEND}
    ${SOURCES_UTILS}
)

set(SOURCES_CORE ${SOURCES_CORE_NO_JIT_FFI})

if(LUAJIT_HAS_JIT)
  list(APPEND SOURCES_CORE ${SOURCES_JIT})
  if(LUAJIT_ENABLE_GDBJIT)
    list(APPEND SOURCES_CORE lj_gdbjit.c)
  endif()
endif()

if(LUAJIT_HAS_FFI)
  list(APPEND SOURCES_CORE ${SOURCES_FFI})
  if(NOT LUAJIT_HAS_JIT)
    # Needed for lj_mcode_sync.
    list(APPEND SOURCES_CORE lj_mcode.c)
  endif()
endif()

make_source_list(CLI_SOURCES
  SOURCES
    luajit.c
)

#}}}
# --- Set OS and arch specific flags -------------------------------------------

include(SetTargetFlags)

# --- Prepare files generated by buildvm ---------------------------------------

add_subdirectory(host)

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin" OR CMAKE_SYSTEM_NAME STREQUAL "iOS")
  set(BUILDVM_MODE machasm)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(BUILDVM_MODE peobj)
else() # Normal systems.
  set(BUILDVM_MODE elfasm)
endif()

message(STATUS "!WIP: ${CMAKE_SYSTEM_NAME} ${BUILDVM_MODE}")

## VM assembly.
add_custom_command(
  OUTPUT lj_vm.S
  COMMAND $<TARGET_FILE:buildvm> -m ${BUILDVM_MODE} -o lj_vm.S
  DEPENDS buildvm
)

## Bytecode definitions.
add_custom_command(
  OUTPUT lj_bcdef.h
  COMMAND $<TARGET_FILE:buildvm> -m bcdef -o lj_bcdef.h ${SOURCES_LUA_LIB}
  DEPENDS buildvm ${SOURCES_LUA_LIB}
)

## Fast function definitions.
add_custom_command(
  OUTPUT lj_ffdef.h
  COMMAND $<TARGET_FILE:buildvm> -m ffdef -o lj_ffdef.h ${SOURCES_LUA_LIB}
  DEPENDS buildvm ${SOURCES_LUA_LIB}
)

## Library definitions.
add_custom_command(
  OUTPUT lj_libdef.h
  COMMAND $<TARGET_FILE:buildvm> -m libdef -o lj_libdef.h ${SOURCES_LUA_LIB}
  DEPENDS buildvm ${SOURCES_LUA_LIB}
)

## Recorder definitions.
add_custom_command(
  OUTPUT lj_recdef.h
  COMMAND $<TARGET_FILE:buildvm> -m recdef -o lj_recdef.h ${SOURCES_LUA_LIB}
  DEPENDS buildvm ${SOURCES_LUA_LIB}
)

## Fold definitions.
add_custom_command(
  OUTPUT lj_folddef.h
  COMMAND $<TARGET_FILE:buildvm> -m folddef -o lj_folddef.h
          ${CMAKE_CURRENT_SOURCE_DIR}/lj_opt_fold.c
  DEPENDS buildvm lj_opt_fold.c
)

## VM definitions.
add_custom_command(
  OUTPUT jit/vmdef.lua
  COMMAND $<TARGET_FILE:buildvm> -m vmdef -o jit/vmdef.lua ${SOURCES_LUA_LIB}
  DEPENDS buildvm ${SOURCES_LUA_LIB}
)

add_custom_target(
  buildvm_output
  DEPENDS lj_bcdef.h lj_ffdef.h lj_libdef.h lj_recdef.h lj_folddef.h
          jit/vmdef.lua
)

# --- Generate core and VM object files ---------------------------------------

## Virtual machine.
add_library(vm_static OBJECT EXCLUDE_FROM_ALL lj_vm.S)
add_library(vm_shared OBJECT EXCLUDE_FROM_ALL lj_vm.S)
set_property(TARGET vm_shared APPEND PROPERTY POSITION_INDEPENDENT_CODE ON)
set_property(TARGET vm_static vm_shared APPEND PROPERTY COMPILE_FLAGS "${TARGET_VM_FLAGS}")

## Platform core.
add_library(core_static OBJECT EXCLUDE_FROM_ALL ${SOURCES_CORE})
add_library(core_shared OBJECT EXCLUDE_FROM_ALL ${SOURCES_CORE})
set_property(TARGET core_shared APPEND PROPERTY POSITION_INDEPENDENT_CODE ON)
set_property(TARGET core_static core_shared APPEND PROPERTY COMPILE_FLAGS "${TARGET_C_FLAGS}")
target_include_directories(core_static PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
target_include_directories(core_shared PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
add_dependencies(core_static buildvm_output)
add_dependencies(core_shared buildvm_output)

# --- Generate output ----------------------------------------------------------

## Compiling and linking library binaries (static, shared).

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(LIB_NAME lua51)
else() # Normal systems.
  set(LIB_NAME luajit)
endif()

set(LIB_OBJECTS_STATIC
  $<TARGET_OBJECTS:vm_static>
  $<TARGET_OBJECTS:core_static>
)
set(LIB_OBJECTS_SHARED
  $<TARGET_OBJECTS:vm_shared>
  $<TARGET_OBJECTS:core_shared>
)

add_library(libluajit_static STATIC EXCLUDE_FROM_ALL ${LIB_OBJECTS_STATIC})
set_target_properties(libluajit_static PROPERTIES
  OUTPUT_NAME ${LIB_NAME}
  COMPILE_FLAGS "${TARGET_C_FLAGS}"
  ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
)
target_link_libraries(libluajit_static m)

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  set(CMAKE_MACOSX_RPATH FALSE)
endif()

add_library(libluajit_shared SHARED EXCLUDE_FROM_ALL ${LIB_OBJECTS_SHARED})
set_target_properties(libluajit_shared PROPERTIES
  OUTPUT_NAME ${LIB_NAME}
  COMPILE_FLAGS "${TARGET_C_FLAGS}"
  LINK_FLAGS "${TARGET_SHARED_FLAGS}"
  LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
  VERSION "${LUAJIT_VERSION_MAJOR}.${LUAJIT_VERSION_MINOR}.${LUAJIT_VERSION_PATCH}"
  SOVERSION "${LUAJIT_VERSION_MAJOR}"
  INSTALL_NAME_DIR /usr/local/lib
)
# NB! For the shared lib, please retain dependency on libdl for correct linking.
target_link_libraries(libluajit_shared m dl)

## Compiling and linking CLIs.

add_executable(luajit_static EXCLUDE_FROM_ALL ${CLI_SOURCES})
set_target_properties(luajit_static PROPERTIES
  COMPILE_FLAGS "${TARGET_C_FLAGS}"
  LINK_FLAGS "${TARGET_BIN_FLAGS}"
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
  OUTPUT_NAME ${LUAJIT_CLI_NAME}
)
target_include_directories(luajit_static PRIVATE
  ${CMAKE_CURRENT_BINARY_DIR}
)
target_link_libraries(luajit_static libluajit_static m dl)

add_executable(luajit_shared EXCLUDE_FROM_ALL ${CLI_SOURCES})
set_target_properties(luajit_shared PROPERTIES
  COMPILE_FLAGS "${TARGET_C_FLAGS}"
  LINK_FLAGS "${TARGET_BIN_FLAGS}"
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
  OUTPUT_NAME ${LUAJIT_CLI_NAME}
)
target_include_directories(luajit_shared PRIVATE
  ${CMAKE_CURRENT_BINARY_DIR}
)
target_link_libraries(luajit_shared libluajit_shared m dl)

set(LIBLUAJIT_DEPS "")
if(NOT BUILDMODE STREQUAL "dynamic")
  list(APPEND LIBLUAJIT_DEPS libluajit_static)
endif()
if(NOT BUILDMODE STREQUAL "static")
  list(APPEND LIBLUAJIT_DEPS libluajit_shared)
endif()

if(BUILDMODE STREQUAL "dynamic")
  set(LUAJIT_DEPS luajit_shared)
else()
  set(LUAJIT_DEPS luajit_static)
endif()

message(STATUS "!WIP: ${LIBLUAJIT_DEPS}")
message(STATUS "!WIP: ${LUAJIT_DEPS}")

add_custom_target(libluajit ALL DEPENDS ${LIBLUAJIT_DEPS})
add_custom_target(luajit ALL DEPENDS libluajit ${LUAJIT_DEPS})

# TODO: Create installable targets.

# install (TARGETS ujit_static
#   DESTINATION bin
#   RUNTIME
#   COMPONENT ujit
# )
# install (TARGETS libujit_static
#   DESTINATION lib
#   ARCHIVE
#   COMPONENT ujit
# )
# install (TARGETS libujit_shared
#   DESTINATION lib
#   LIBRARY
#   COMPONENT ujit
# )
# install (FILES
#   "${CMAKE_CURRENT_BINARY_DIR}/${LUAJIT_CLI_NAME_ALIAS_STATIC}" # Symlink to ujit
#   DESTINATION bin
#   COMPONENT ujit
# )

# install (FILES
#     "${CMAKE_CURRENT_BINARY_DIR}/ujit.h"      # Main header for uJIT
#     luaconf.h   # Configuration header
#     lua.h       # C API for Lua
#     lualib.h    # Lua standard libraries
#     lauxlib.h   # Auxiliary library's C API
#     lextlib.h   # uJIT-specific extensions of the C API
#     lua.hpp     # Convenience wrapper for C++
#   DESTINATION include/ujit
#     PERMISSIONS
#       OWNER_READ OWNER_WRITE
#       GROUP_READ
#       WORLD_READ
#   COMPONENT ujit
# )

# set(LUAJIT_ETC_DIR ${PROJECT_BINARY_DIR}/etc)

# install (FILES
#     ${LUAJIT_ETC_DIR}/ujit.1.gz
#   DESTINATION share/man/man1
#     PERMISSIONS
#       OWNER_READ OWNER_WRITE
#       GROUP_READ
#       WORLD_READ
#   COMPONENT ujit)
# install (FILES
#     ${LUAJIT_ETC_DIR}/ujit.pc
#   DESTINATION lib/pkgconfig
#     PERMISSIONS
#       OWNER_READ OWNER_WRITE
#       GROUP_READ
#       WORLD_READ
#   COMPONENT ujit)
